<?xml version="1.0" encoding="UTF-8"?>
<?apml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->

<definitions>
    <httpserver extends="java.lang.Object" class="apml.examples.httpserver.HttpServer.java"></httpserver>   
</definitions>

/* Application Program Markup Language */
<apml language="Java 9" version="1.0">  
    
    /* hello world echo server quick example program */        

    <system id="HTTPserver" class="apml.examples.httpserver.HttpServerSystem" package="apml.examples.httpserver">
        <object class="apml.examples.httpserver.HttpServer.java">
            <listener id="options" class="HttpServerOnOPTIONSListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnOptionsHit"></subscriber>
            </listener>  
            <listener id="get" class="HttpServerOnGETListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnGetCall"></subscriber>
            </listener> 
            <listener id="head" class="HttpServerOnHEADListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnHeadCall"></subscriber>
            </listener>                        
            <listener id="post" class="HttpServerOnPOSTListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnPostHit"></subscriber>
            </listener> 
            <listener id="put" class="HttpServerOnPUTListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnPutHit"></subscriber>
            </listener>  
            <listener id="delete" class="HttpServerOnDELETEListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnDeleteCall"></subscriber>
            </listener> 
            <listener id="trace" class="HttpServerOnTRACEListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnTraceCall"></subscriber>
            </listener>                        
            <listener id="connect" class="HttpServerOnCONNECTListener" with="*" function="apml.examples.httpserver.Classname.function">
                <subscriber class="apml.examples.httpserver.HttpServerOnConnectHit"></subscriber>
            </listener>             
                                              
        </object>
    </system>  
    
    <system id="echoclient" package="apml.examples.echoserver">
        <object class="EchoClient">
            <listener class="EchoServerClientSocketListener"></listener>
        </object>
    </system>                      
    
    <driver class="apml.examples.driver.StandardDriver"> //to start and attach APML objects to system framework; to build out skeleton for starters
        <template></template>
        <template></template>
        <template></template>
        <template></template>
    </driver>
    
    <compiler class="apml.examples.compiler.StdApmlToJavaCompiler"> //move APML markup over to Java
        <architect>Max Rupplin</architect>        
        <template type="camelcase"></template>
        <template type="annotations">formal</template>
        <template type="brackets">newline</template>
        <template type="class_treatment">inner</template>
    </compiler>
    
    <compiler class="apml.examples.compiler.StdJavaToApmlCompiler"> //move Java source code over to APML markup
        <architect>Max Rupplin</architect>        
        <template type=""></template>
        <template type=""></template>
    </compiler>    
</apml>

ok now what?

structurally we need a couple things

1) instantiation
2) program start function (ie init, start, run, instead of just main)
3) system api underlayment

