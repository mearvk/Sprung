<?xml version="1.0" encoding="UTF-8"?>
<?apml version="1.0" encoding="UTF-8"?>
<!--
To change this license header, choose License Headers in Project Properties.
To change this template file, choose Tools | Templates
and open the template in the editor.
-->

<definitions>
    <echoserver extends="java.lang.Object" class="apml.examples.echoserver.EchoServer.java"></echoserver>   
</definitions>

/* Application Program Markup Language */
<apml language="Java 9" version="1.0">  
    
    /* hello world echo server quick example program */    
    
    <system factor="budgetary" factor="time">
        <oversee id="echoserver" badge="123456">
            <os architect="dave friend">

            </os>
            <executable architect="dave driend">

            </executable>
            <drivers architect="dave tend">

            </drivers>
            <gui>

            </gui>
        </oversee>
    </system>
    
    <reference showoutput="true" class="oversee" target="echoserver.userinterface" output="taxmexml"></reference>
    
    <printer id="taxmexml">
        <object id="userinterface">
            
        </object>
    </printer>

    <system id="echoserver" class="apml.examples.echoserver.EchoServerSystem" package="apml.examples.echoserver">
        <object class="apml.examples.echoserver.EchoServer.java">                        
            <listener id="esocl" class="EchoServerOnConnectListener" with="*" function="org.blah.Classname.fucntion">
                <subscriber id="esocl_connect_sub_1" class="apml.examples.echoserver.EchoServerOnConnect_1"></subscriber>
                <subscriber id="esocl_connect_sub_2" class="apml.examples.echoserver.EchoServerOnConnect_2"></subscriber>
                <subscriber id="esocl_connect_sub_3" class="apml.examples.echoserver.EchoServerOnConnect_3"></subscriber>
            </listener>
            <listener id="esoel" class="EchoServerOnExitListener" with="*">
                <subscriber id="" class="apml.examples.echoserver.EchoServerOnExit_1"></subscriber>
                <subscriber class="apml.examples.echoserver.EchoServerOnExit_2"></subscriber>
                <subscriber class="apml.examples.echoserver.EchoServerOnExit_3"></subscriber>
            </listener>
            <listener id="esorl" class="EchoServerOnReadListener" with="*">
                <subscriber class="apml.examples.echoserver.EchoServerOnReceipt_1"></subscriber>
                <subscriber class="apml.examples.echoserver.EchoServerOnReceipt_2"></subscriber>
                <subscriber class="apml.examples.echoserver.EchoServerOnReceipt_3"></subscriber>
            </listener>
            <listener id="esodl" class="EchoServerOnDispatchListener" with="*">
                <subscriber class="apml.examples.echoserver.EchoServerOnDispatch_1"></subscriber>
                <subscriber class="apml.examples.echoserver.EchoServerOnDispatch_2"></subscriber>
                <subscriber class="apml.examples.echoserver.EchoServerOnDispatch_3"></subscriber>
            </listener>                                    
        </object>
    </system>   
    
    <system id="echoclient" package="apml.examples.echoserver">
        <object class="EchoClient">
            <listener class="EchoServerClientSocketListener"></listener>
        </object>
    </system>                      
    
    <driver class="apml.examples.driver.StandardDriver"> //to start and attach APML objects to system framework; to build out skeleton for starters
        <template></template>
        <template></template>
        <template></template>
        <template></template>
    </driver>
    
    <compiler class="apml.examples.compiler.StdApmlToJavaCompiler"> //move APML markup over to Java
        <architect>Max Rupplin</architect>        
        <template type="camelcase"></template>
        <template type="annotations">formal</template>
        <template type="brackets">newline</template>
        <template type="class_treatment">inner</template>
    </compiler>
    
    <compiler class="apml.examples.compiler.StdJavaToApmlCompiler"> //move Java source code over to APML markup
        <architect>Max Rupplin</architect>        
        <template type=""></template>
        <template type=""></template>
    </compiler>    
</apml>

ok now what?

structurally we need a couple things

1) instantiation
2) program start function (ie init, start, run, instead of just main)
3) system api underlayment

