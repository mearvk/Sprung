/* Max Rupplin -- Sprung 1.0 system specification */
 
@pragma  
/shorthand                                                                  /* any branch that has shorthand extension can make these aliases useful */
{
    bndi:alias(doprocess)::(doproc)                                         /* doprocess, doproc equivalence established */
    bndi:alias(process)::(proc)                                             /* process, proc equivalence established */
}

@pragma
/processor{}                                                                /* processor branching supports /doprocess and /process functions */
{
    /doprocess/{parama(0..1)}                                               /* doprocess requires zero or one param */
    /process/{parama(0..1)}             
}

@pragma
bndi://echoclient/subscribers/onconnect/
{
    java://classname/function/{parama}
}

@pragma                                                                     /* when socket exits; do continue to //echoclient/exit{} */
bndi://echoclient/network/onexit/
{
    bndi://echoclient/exit{}
}

@pragma 
bndi://echoclient/objects/processors
{
    bndi://processor/java:classname.doprocess(Object o);                    /* processor bindings should look like these exemplars */
    bndi://processor/java:classname.process(Object o);   
    bndi://processor/java:interface.org.sprung.Processor;
}

----------------------------------------------

@register
bndi://echoserver/systems/

@register
bndi://echoserver/objects/

@register
bndi://echoserver/listeners/onconnect/{this.id}

@register
bndi://echoserver/subscribers/onconnect/{this.id}

@register
bndi://blind                                                                /* namespace such that it would run (Sprung add, drop, connect, etc functions) as expected */

----------------------------------------------

@object
{    
    cmdline//system.cmdline
    {
        write :: java.lang.System.out
        read  :: java.lang.System.in
    }
}

@object
{   
    input//socket.inputstream
    {
        bytes :: java.net.Socket.getInputstream.bytes                       /* that bytes maps to Socket byte buffer */
        write :: java.net.Socket.getInputstream.write                       /* that write maps to standard socket outputstream write function */
        poll  :: java.net.Socket.getInputstream.poll                        /* that poll maps to standard socket buffer poll function */
    }
}

@object
{
    output//socket.outputstream                                             /* that outmap maps to the socket.outputstream */
    {
        bytes :: java.net.Socket.getOutputstream.bytes                      /* that bytes maps to Socket byte buffer */
        write :: java.net.Socket.getOutputstream.write                      /* that write maps to standard socket outputstream write function */
        poll  :: java.net.Socket.getOutputstream.poll                       /* that poll maps to standard socket buffer poll function */
    }
}

----------------------------------------------

@implementation
bndi://echoclient/systems/                                                  /* systems, both care to know when //echoclient/objects makes calles to new{}, delete{}, clean{} */
{
    bndi://echoclient/objects/
    {
        onalloc//echoclient/listeners/new{}                                 /* bind onalloc to new{} events */                    
        ondelete//echoclient/listeners/delete{}                             /* bind ondelete to delete{} events */        
        oncleanup//echoclient/listeners/clean{}                             /* bind oncleanup to clean{} events */
    }
}

@implementation
bndi://echoclient/listeners/
{
    onconnect//echoclient/subscribers/{cmdline.write("connected...")}       /* onconnect event for //echoclient/listeners/ should fire anonymous //echoclient/subscribers cmdline.write */
    onreceipt//echoclient/subscribers/{cmdline.write(input)}                /* onreceipt event for //echoclient/listeners/ should fire anonymous //echoclient/subscribers cmdline.write */
    ondispatch//echoclient/subscribers/{cmdline.write(output)}              /* ondispatch event for //echoclient/listeners/ should fire anonymous //echoclient/subscribers cmdline.write */
    onkeypress{KEY.ENTER}//echoclient/subscribers/{output.write}            /* onkeypress event for //echoclient/listeners/ should fire anonymous //echoclient/subscribers output.write */
}

@implementation
onalloc//echoclient/listeners/new{}
{
    bndi://system/allocation/subscribers/
    {
        org.classname.listeners.InstantiationListener;
        org.classname.listeners.MemoryLeakListener;
        org.classname.listeners.SystemObserverListener;
    }
}

----------------------------------------------

@with                                                                       /* scope definitives; ie who can 'add', 'remove' objects from BNDI sets 
{
    @add
    bndi://echoserver/objects/
    {
        bndi://echoserver/objects/
        bndi://echoserver/system/
        bndi://echoclient/listeners/../*
    }

    @remove
    bndi://echoserver/objects
    {
        {}  /* empty set */
    }
}